package utilisateur;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;

import source.BCrypt;

public class Utilisateur {
	public static Connection connection = connexionDB();
	private static int utilisateur;
	
	public static void main(String args[]) {
		connexionUtilisateur();
		menuAvecChoix();
	}
	
	public static void menuAvecChoix() {
		System.out.println("----------------------------------------------");
		System.out.println("|           Que voulez-vous faire ?          |");
		System.out.println("----------------------------------------------");
		System.out.println("|1. Introduire une nouvelle question.        |");
		System.out.println("|2. Visualiser les questions posées.         |");
		System.out.println("|3. Visualiser les questions repondues.      |");
		System.out.println("|4. Visualiser toutes les questions.         |");
		System.out.println("|5. Visualiser les questions d'un tag.       |");
		System.out.println("----------------------------------------------");
		Scanner scanner = new Scanner(System.in);
		int choix = 0;
		
		do {
			System.out.print("Veuillez rentrer votre choix : ");
			choix = scanner.nextInt();
		}while(!(choix > 0 && choix < 6));
		
		switch(choix) {
			case 1:
				introduireNouvelleQuestion();
				break;
			case 2:
				visualiserQuestionsPosees();
				break;
			case 3:
				visualiserQuestionsRepondues();
				break;
			case 4:
				toutesLesQuestions();
				break;
			case 5:
				visualiserQuestionsAvecTag(); 
				break;
		}
		scanner.close();
	}
	
	public static Connection connexionDB() {
		ConnexionDB aRenvoyer = new ConnexionDB();
		return aRenvoyer.getConnection();
	}
	
	public static boolean connexionUtilisateur() {
		Scanner scannerCo = new Scanner(System.in);
		System.out.println("Etes-vous deja inscrit ? (O/N)");
		String caract = scannerCo.nextLine();
		if("O".equals(caract)) {
			System.out.print("Veuillez entrer votre identifiant : ");
			String login = scannerCo.nextLine();
			System.out.print("Veuillez entrer votre mot de passe : ");
			String password = scannerCo.nextLine();
			/*password = BCrypt.hashpw(password, BCrypt.gensalt());
			System.out.println(password);*/
			try {
	            PreparedStatement ps = connection
	                    .prepareStatement("SELECT id_utilisateur, mot_de_passe FROM SOIPL.utilisateurs WHERE nom_utilisateur="+login);
	            ResultSet rs = ps.executeQuery();
	            boolean ok = false;
	            while (rs.next()) {
	                utilisateur = rs.getInt(0);
	                ok = BCrypt.checkpw(password, rs.getString(1));
	                
	            }
	            if(ok) {
	            	System.out.println("mot de passe correcte");
	            }else {
	            	System.out.println("mot de passe incorect");
	            	connexionUtilisateur();
	            }
	            rs.close();
	            ps.close();

	        } catch (Exception e) {
	            e.printStackTrace();
	        }
			
			//TODO le false a changé et verification dans la db
			boolean valeurDeRetour = false; 
			if(valeurDeRetour == true) {
				
			}else {
				
			}
		}else{
			System.out.print("Veuillez entrer votre email : ");
			String email = scannerCo.nextLine();
			System.out.print("Veuillez entrer votre identifiant : ");
			String login = scannerCo.nextLine();
			System.out.print("Veuillez entrer votre mot de passe : ");
			String password = scannerCo.nextLine();
			password = BCrypt.hashpw(password, BCrypt.gensalt());
			try {
				PreparedStatement ps = connection.prepareStatement("INSERT INTO" + " SOIPL.utilisateurs VALUES (DEFAULT, ?, ?, ?, DEFAULT, DEFAULT, DEFAULT);" );
				ps.setString(1,login);
				ps.setString(2,password);
				ps.setString(3,email);
				ps.executeUpdate();	
			}catch (SQLException se) {
				System.out.println("Erreur lors de l’insertion !");
				se.printStackTrace();
				System.exit(1); 
			}
			try {
	            PreparedStatement ps = connection
	                    .prepareStatement("SELECT id_utilisateur FROM SOIPL.utilisateurs WHERE nom_utilisateur= ?");
	            ps.setString(1, login);
	            utilisateur = ps.executeUpdate();
	            ps.close();

	        } catch (Exception e) {
	            e.printStackTrace();
	        }
		}
		scannerCo.close();
		return true;
	}
	
	public static void introduireNouvelleQuestion() {
		Scanner scanner = new Scanner(System.in);
		System.out.println("Introduisez le titre de votre nouvelle question");
		String titre = scanner.nextLine();
		System.out.println("Introduisez votre nouvelle question");
		String question = scanner.nextLine();
		try {
			PreparedStatement ps = connection.prepareStatement("INSERT INTO" + " SOIPL.questions VALUES (DEFAULT, ?, ?, DEFAULT, DEFAULT, ?, ?, DEFAULT);" );
			ps.setInt(1,utilisateur);
			ps.setTimestamp(2,getCurrentTimeStamp());
			ps.setString(3,titre);
			ps.setString(4,question);
			ps.executeUpdate();	
		}catch (SQLException se) {
			System.out.println("Erreur lors de l’insertion !");
			se.printStackTrace();
			System.exit(1); 
		}
		scanner.close();
		menuAvecChoix();
	}
	
	public static void visualiserQuestionsPosees() {
		System.out.println("Affichage de toutes les Questions Posees");
		try {
			PreparedStatement ps = connection.prepareStatement("SELECT * FROM SOIPL.questions WHERE utilisateur_createur = ?");
			ps.setInt(1, utilisateur);
			ResultSet rs = ps.executeQuery();
			int i = 0;
			while(rs.next()){
				i++;
				System.out.println(i + " " + rs.getString(0));
			}
		}catch(SQLException se) {
			
		}
		menuAvecChoix();
	}
	
	public static void toutesLesQuestions() {
		System.out.println("Affichage de toutes les questions");
		try {
            PreparedStatement ps = connection
                    .prepareStatement("SELECT * FROM SOIPL.questions");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                System.out.println(rs.getString(1) + ". " + rs.getString(7));
                
            }
            rs.close();
            ps.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
		
		menuAvecChoix();
	}
	
	public static void visualiserQuestionsRepondues() {
		System.out.println("Affichage de toutes les questions répondues");
		menuAvecChoix();
	}
	
	public static void visualiserQuestionsAvecTag() {
		System.out.println("Affichage de toutes les questions avec tag specifique");
		menuAvecChoix();
	}
	
	private static java.sql.Timestamp getCurrentTimeStamp() {

		java.util.Date today = new java.util.Date();
		return new java.sql.Timestamp(today.getTime());

	}
}
